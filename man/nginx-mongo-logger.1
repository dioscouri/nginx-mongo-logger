.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "NGINX\-MONGO\-LOGGER" "1" "October 2011" "" ""
.
.SH "NAME"
\fBnginx\-mongo\-logger\fR \- Pipe Nginx log output into a MongoDB collection
.
.SH "SYNOPSIS"
\fBnginx\-mongo\-logger log_file mongo_collection [mongo_host] [mongo_port]\fR
.
.SH "DESCRIPTION"
Spawns a tail process and listens for complete lines of input\. For each line, \fBnginx\-mongo\-logger\fR parses CLF (Common Log Format) and extracts nuggets of info, which it then inserts into a MongoDB collection\.
.
.SH "LOG FORMAT"
The log format that \fBnginx\-mongo\-logger\fR expects is as follows:
.
.IP "" 4
.
.nf

IP_ADDR \- USER [TIME_STAMP] "HTTP_METHOD REQUEST_URI HTTP/1\.1" STATUS SIZE "REFERRER_URI" "USER_AGENT"
.
.fi
.
.IP "" 0
.
.P
Where \fBTIME_STAMP\fR looks like: \fB14/Oct/2011:19:53:31 \-0400\fR
.
.SH "MONGODB SETUP"
For best results, you should setup a capped collection on your MongoDB server ahead of time\. This takes care of automatic rotation, as old log data will be automatically replaced by new\.
.
.IP "" 4
.
.nf

$ mongo
> use my_database
> db\.createCollection(\'nginx_logs\', { capped: true, size: 32000000 })
.
.fi
.
.IP "" 0
.
.SH "UPSTART JOB"
See \fBexamples/upstart\.conf\fR for an example of an Upstart job using \fBnginx\-mongo\-logger\fR\.
.
.SH "ANALYZING YOUR LOGS"
Analyzing your stored logs is crazy simple\. The easiest way is to write a MapReduce function and store it on the server to cut down on typing\. This example function will rank all 404 errors by frequency and store them in a collection called \fBdead_links\fR\.
.
.IP "" 4
.
.nf

$ mongo
> use my_database
> rank_404s = function() {
    return db\.runCommand({
        mapReduce: \'access_logs\',
        query: { status: 404 },
        out: \'dead_links\',
        map: function() {
            emit(this\.method + "::" + this\.path, { count: 1 });
        },
        reduce: function(key, vals) {
            var result = { count: 0 };
            vals\.forEach(function(val) {
                result\.count += val\.count;
            });
            return result;
        }
    });
}
> db\.system\.js\.save({ _id: \'rank_404s\', value: rank_404s })
> db\.eval(\'rank_404s()\')
.
.fi
.
.IP "" 0

